/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from '@nestjs/graphql';
import { ApiProperty } from '@nestjs/swagger';
import {
  IsDate,
  IsEnum,
  IsOptional,
  IsString,
  IsJSON,
  ValidateNested,
} from 'class-validator';
import { Type } from 'class-transformer';
import { EnumDocumentDocumentType } from './EnumDocumentDocumentType';
import { EnumDocumentStatus } from './EnumDocumentStatus';
import { GraphQLJSON } from 'graphql-type-json';
import { JsonValue } from 'type-fest';
import { User } from '../../user/base/User';

@ObjectType()
class Document {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    enum: EnumDocumentDocumentType,
  })
  @IsEnum(EnumDocumentDocumentType)
  @Field(() => EnumDocumentDocumentType, {
    nullable: true,
  })
  documentType?: 'Driverlicence' | 'Passport' | 'GovernmentId';

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  expiringAt!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    enum: EnumDocumentStatus,
  })
  @IsEnum(EnumDocumentStatus)
  @IsOptional()
  @Field(() => EnumDocumentStatus, {
    nullable: true,
  })
  status?: 'Approved' | 'Rejected' | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsJSON()
  @Field(() => GraphQLJSON)
  url!: JsonValue;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}

export { Document };
