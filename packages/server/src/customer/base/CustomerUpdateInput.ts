/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from '@nestjs/graphql';
import { ApiProperty } from '@nestjs/swagger';
import { AccountUpdateManyWithoutCustomersInput } from './AccountUpdateManyWithoutCustomersInput';
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from 'class-validator';
import { Type } from 'class-transformer';
import { Account } from '../../account/base/Account';
import { DocumentUpdateManyWithoutCustomersInput } from './DocumentUpdateManyWithoutCustomersInput';
import { UserUpdateManyWithoutCustomersInput } from './UserUpdateManyWithoutCustomersInput';
import { EnumCustomerStatus } from './EnumCustomerStatus';

@InputType()
class CustomerUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AccountUpdateManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => AccountUpdateManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => AccountUpdateManyWithoutCustomersInput, {
    nullable: true,
  })
  Account?: AccountUpdateManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dob?: Date | null;

  @ApiProperty({
    required: false,
    type: () => DocumentUpdateManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => DocumentUpdateManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => DocumentUpdateManyWithoutCustomersInput, {
    nullable: true,
  })
  documents?: DocumentUpdateManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserUpdateManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => UserUpdateManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => UserUpdateManyWithoutCustomersInput, {
    nullable: true,
  })
  enitities?: UserUpdateManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstname?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastname?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string;

  @ApiProperty({
    required: false,
    enum: EnumCustomerStatus,
  })
  @IsEnum(EnumCustomerStatus)
  @IsOptional()
  @Field(() => EnumCustomerStatus, {
    nullable: true,
  })
  status?: 'Approved' | 'Failed' | 'Pending' | null;
}

export { CustomerUpdateInput as CustomerUpdateInput };
